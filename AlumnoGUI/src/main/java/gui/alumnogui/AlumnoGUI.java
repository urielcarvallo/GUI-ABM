/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui.alumnogui;

import dao.DAOFactory;
import dao.DaoException;
import dao.DaoFactoryException;
import gui.alumnogui.dialog.AlumnoDialog;
import gui.alumnogui.mappers.AlumnoMapper;
import gui.persona.Alumno;
import gui.persona.PersonaException;
import java.io.File;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author g.guzman
 */
public class AlumnoGUI extends javax.swing.JFrame {
    
    private static final int TIPO_TXT = 0;
    private static final int TIPO_SQL = 1;

    /**
     * Creates new form AlumnoGUI
     */
    public AlumnoGUI() {
            initComponents();
            setTitle("Alumno GUI");
            setLocationRelativeTo(null);
            
            disaleButtons();
            
            AlumnoTableModel alumnoModel = new AlumnoTableModel();
            
        try {
            // Simulaci√≥n (TODO quitar)
            List<Alumno> alumnos = new ArrayList<>();
            Alumno alu1 = new Alumno();
            Alumno alu2 = new Alumno();
            
            alu1.setDni(12345678);
            alu1.setNombre("NombreUno");
            alu1.setApellido("ApellidoUno");
            alu1.setFechaNac(LocalDate.now());
            
            alu2.setDni(9999999);
            alu2.setNombre("NombreDos");
            alu2.setApellido("ApellidoDos");
            alu2.setFechaNac(LocalDate.now().plusDays(45));
            
            alumnos.add(alu1);
            alumnos.add(alu2);
            
            alumnoModel.setAlumnos(alumnos);
            
            alumnosTable.setModel(alumnoModel);
        } catch (PersonaException ex) {
            Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        alumnosTable = new javax.swing.JTable();
        crearButton = new javax.swing.JButton();
        modificarButton = new javax.swing.JButton();
        borrarButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        selectorRepoComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        fullpathTextField = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        alumnosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(alumnosTable);

        crearButton.setText("Crear");
        crearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearButtonActionPerformed(evt);
            }
        });

        modificarButton.setText("Modificar");
        modificarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarButtonActionPerformed(evt);
            }
        });

        borrarButton.setText("Borrar");
        borrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarButtonActionPerformed(evt);
            }
        });

        jButton4.setText("Consultar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        selectorRepoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TXT", "SQL" }));
        selectorRepoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorRepoComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Seleccione repositorio:");

        browseButton.setText("...");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        fullpathTextField.setEditable(false);
        fullpathTextField.setBackground(new java.awt.Color(204, 204, 204));

        jCheckBox1.setText("Solo los activos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(crearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(modificarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(borrarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(fullpathTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(selectorRepoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(55, 55, 55)
                                    .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectorRepoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fullpathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(crearButton)
                        .addGap(18, 18, 18)
                        .addComponent(modificarButton)
                        .addGap(18, 18, 18)
                        .addComponent(borrarButton)
                        .addGap(26, 26, 26)
                        .addComponent(jButton4)))
                .addGap(102, 102, 102))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        File dir = new File("C:\\Users\\g.guzman\\Documents\\NetBeansProjects\\2024\\Unificado\\TestDao");
        chooser.setCurrentDirectory(dir);
        int resp = chooser.showOpenDialog(jLabel1);
        if (resp!=JFileChooser.APPROVE_OPTION) {
            return;
        }
        fullpathTextField.setText(chooser.getSelectedFile().getAbsolutePath());
        crearButton.setEnabled(true);
        modificarButton.setEnabled(true);
    }//GEN-LAST:event_browseButtonActionPerformed

    private void selectorRepoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorRepoComboBoxActionPerformed
        if (selectorRepoComboBox.getSelectedIndex()==TIPO_TXT) {
            browseButton.setVisible(true);
            fullpathTextField.setVisible(true);
        }
        else {
            browseButton.setVisible(false);
            fullpathTextField.setVisible(false);
        }
    }//GEN-LAST:event_selectorRepoComboBoxActionPerformed

    private void modificarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarButtonActionPerformed
        int rowSlected = alumnosTable.getSelectedRow();
        if (rowSlected<0) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado un alumno", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        // TODO ...
        Alumno alumno = getAlumnoSeleccionado(rowSlected);
        
        AlumnoDialog alumnoDialog = new AlumnoDialog(this, true, AlumnoDialog.UPDATE);
        alumnoDialog.setDto(AlumnoMapper.alumno2Dto(alumno));
        alumnoDialog.setVisible(true); // se suspende la ejecuci√≥n
        
        Map<String, String> configMap = new HashMap<>();
        
        String tipoInstancia = getTipoInstancia();
        
        //configMap.put(DAOFactory.TIPO_DAO, DAOFactory.TIPO_DAO_TXT);
        configMap.put(DAOFactory.TIPO_DAO, tipoInstancia);
        String fullpath = fullpathTextField.getText();
        configMap.put(DAOFactory.FULL_PATH, fullpath);
        try {
            // Recupero los datos cargador en el di√°logo
            dao.DAO dao = DAOFactory.getInstance().crearDAO(configMap);
        } catch (DaoFactoryException ex) {
            Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            //dao.update(AlumnoMapper.dto2Alumno(alumnoDialog.getDto()));
            alumno = AlumnoMapper.dto2Alumno(alumnoDialog.getDto());
        } catch (PersonaException ex) {
            Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("alumno a persistir ==> "+alumno.getDni() + "- "+alumno.getNombre()+ "- "+alumno.getFechaNac());
                
    }//GEN-LAST:event_modificarButtonActionPerformed

    private void borrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarButtonActionPerformed
        int rowSlected = alumnosTable.getSelectedRow();
        if (rowSlected<0) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado un alumno", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        else {
            Alumno alumno = getAlumnoSeleccionado(rowSlected);
            
            int resp = JOptionPane.showConfirmDialog(this, "¬øEst√° seguro de borrar el alumno "
                    + "("+alumno.getDni()+" - " +alumno.getNombre()+")?", "Confirmaci√≥n de borrado", JOptionPane.OK_CANCEL_OPTION);
            if (resp!=JOptionPane.OK_OPTION) {
                return;
            }
            System.out.println("Se borra el alumno");
            // Borrar
        }
    }//GEN-LAST:event_borrarButtonActionPerformed

    private Alumno getAlumnoSeleccionado(int rowSlected) {
        AlumnoTableModel alumnoTableModel = (AlumnoTableModel) alumnosTable.getModel();
        List<Alumno> alumnos = alumnoTableModel.getAlumnos();
        Alumno alumno = alumnos.get(rowSlected);
        return alumno;
    }
    
    private String getTipoInstancia(){
        if (selectorRepoComboBox.getSelectedIndex()==TIPO_TXT) {
            return DAOFactory.TIPO_DAO_TXT;
        }
        else {
            return DAOFactory.TIPO_DAO_SQL;
        }
    }

    private void crearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearButtonActionPerformed
        AlumnoDialog alumnoDialog = new AlumnoDialog(this, true, AlumnoDialog.CREATE);
        alumnoDialog.setVisible(true);
        
        Map<String, String> configMap = new HashMap<>();
        //configMap.put(DAOFactory.TIPO_DAO, DAOFactory.TIPO_DAO_TXT);
        
        String tipoInstancia = getTipoInstancia();
        
        configMap.put(DAOFactory.TIPO_DAO, tipoInstancia);
        String fullpath = fullpathTextField.getText();
        configMap.put(DAOFactory.FULL_PATH, fullpath);
        try {
            dao.DAO dao = DAOFactory.getInstance().crearDAO(configMap);
        } catch (DaoFactoryException ex) {
            Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            //dao.update(AlumnoMapper.dto2Alumno(alumnoDialog.getDto()));
            Alumno alumno = new Alumno();
            alumno = AlumnoMapper.dto2Alumno(alumnoDialog.getDto());
        } catch (PersonaException ex) {
            Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }        
        
        //System.out.println("Se cerr√≥ el modal");
    }//GEN-LAST:event_crearButtonActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        AlumnoDialog alumnoDialog = new AlumnoDialog(this, true, AlumnoDialog.READ);
        alumnoDialog.setVisible(true);

    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AlumnoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AlumnoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AlumnoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AlumnoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AlumnoGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable alumnosTable;
    private javax.swing.JButton borrarButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton crearButton;
    private javax.swing.JTextField fullpathTextField;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modificarButton;
    private javax.swing.JComboBox<String> selectorRepoComboBox;
    // End of variables declaration//GEN-END:variables

    private void disaleButtons() {
        crearButton.setEnabled(true);
        modificarButton.setEnabled(true);
    }
}
